[{"C:\\Users\\a-713\\OneDrive\\Desktop\\DC_Blockchain\\DC_Blockchain\\DC_FrontEnd\\src\\index.js":"1","C:\\Users\\a-713\\OneDrive\\Desktop\\DC_Blockchain\\DC_Blockchain\\DC_FrontEnd\\src\\App.js":"2","C:\\Users\\a-713\\OneDrive\\Desktop\\DC_Blockchain\\DC_Blockchain\\DC_FrontEnd\\src\\reportWebVitals.js":"3","C:\\Users\\a-713\\OneDrive\\Desktop\\DC_Blockchain\\DC_Blockchain\\DC_FrontEnd\\src\\reducers\\app.reducers.js":"4","C:\\Users\\a-713\\OneDrive\\Desktop\\DC_Blockchain\\DC_Blockchain\\DC_FrontEnd\\src\\actions\\app.action.js":"5","C:\\Users\\a-713\\OneDrive\\Desktop\\DC_Blockchain\\DC_Blockchain\\DC_FrontEnd\\src\\Components\\class.js":"6","C:\\Users\\a-713\\OneDrive\\Desktop\\DC_Blockchain\\DC_Blockchain\\DC_FrontEnd\\src\\Components\\BlockchainAPI.js":"7","C:\\Users\\a-713\\OneDrive\\Desktop\\DC_Blockchain\\DC_Blockchain\\DC_FrontEnd\\src\\Components\\Login_Register\\Login.js":"8","C:\\Users\\a-713\\OneDrive\\Desktop\\DC_Blockchain\\DC_Blockchain\\DC_FrontEnd\\src\\Components\\Navbar\\NavbarDC.js":"9","C:\\Users\\a-713\\OneDrive\\Desktop\\DC_Blockchain\\DC_Blockchain\\DC_FrontEnd\\src\\Components\\Login_Register\\CreateKeys.js":"10","C:\\Users\\a-713\\OneDrive\\Desktop\\DC_Blockchain\\DC_Blockchain\\DC_FrontEnd\\src\\Components\\Dashboard\\Dashboard.js":"11","C:\\Users\\a-713\\OneDrive\\Desktop\\DC_Blockchain\\DC_Blockchain\\DC_FrontEnd\\src\\Components\\Account\\Account.js":"12","C:\\Users\\a-713\\OneDrive\\Desktop\\DC_Blockchain\\DC_Blockchain\\DC_FrontEnd\\src\\Components\\Account\\transaction_class.js":"13"},{"size":738,"mtime":1614166312104,"results":"14","hashOfConfig":"15"},{"size":866,"mtime":1614168739215,"results":"16","hashOfConfig":"15"},{"size":375,"mtime":1614166312106,"results":"17","hashOfConfig":"15"},{"size":778,"mtime":1614166312105,"results":"18","hashOfConfig":"15"},{"size":358,"mtime":1614166312102,"results":"19","hashOfConfig":"15"},{"size":196,"mtime":1614166312099,"results":"20","hashOfConfig":"15"},{"size":808,"mtime":1614166312095,"results":"21","hashOfConfig":"15"},{"size":3801,"mtime":1614167533080,"results":"22","hashOfConfig":"15"},{"size":1081,"mtime":1614168578101,"results":"23","hashOfConfig":"15"},{"size":3007,"mtime":1614167753075,"results":"24","hashOfConfig":"15"},{"size":1868,"mtime":1614173743573,"results":"25","hashOfConfig":"15"},{"size":7394,"mtime":1614167955361,"results":"26","hashOfConfig":"15"},{"size":472,"mtime":1614167992787,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"kq271g",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"C:\\Users\\a-713\\OneDrive\\Desktop\\DC_Blockchain\\DC_Blockchain\\DC_FrontEnd\\src\\index.js",[],"C:\\Users\\a-713\\OneDrive\\Desktop\\DC_Blockchain\\DC_Blockchain\\DC_FrontEnd\\src\\App.js",[],"C:\\Users\\a-713\\OneDrive\\Desktop\\DC_Blockchain\\DC_Blockchain\\DC_FrontEnd\\src\\reportWebVitals.js",[],"C:\\Users\\a-713\\OneDrive\\Desktop\\DC_Blockchain\\DC_Blockchain\\DC_FrontEnd\\src\\reducers\\app.reducers.js",["58"],"C:\\Users\\a-713\\OneDrive\\Desktop\\DC_Blockchain\\DC_Blockchain\\DC_FrontEnd\\src\\actions\\app.action.js",[],"C:\\Users\\a-713\\OneDrive\\Desktop\\DC_Blockchain\\DC_Blockchain\\DC_FrontEnd\\src\\Components\\class.js",[],["59","60"],"C:\\Users\\a-713\\OneDrive\\Desktop\\DC_Blockchain\\DC_Blockchain\\DC_FrontEnd\\src\\Components\\BlockchainAPI.js",[],"C:\\Users\\a-713\\OneDrive\\Desktop\\DC_Blockchain\\DC_Blockchain\\DC_FrontEnd\\src\\Components\\Login_Register\\Login.js",["61","62","63","64","65"],"import React, { Component } from 'react'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Alert from 'react-bootstrap/Alert'\r\nimport { Link } from 'react-router-dom';\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport axios from 'axios';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport * as actions from '../../actions/app.action';\r\n\r\nclass Login extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            pubInput: \"\",\r\n            privInput: \"\",\r\n            showSuccess: false,\r\n            variant: \"success\",\r\n            text: '',\r\n            value: false,\r\n            to: false,\r\n            id: \"\",\r\n            balance: 0\r\n        }\r\n\r\n    }\r\n\r\n\r\n    setPubInput = (e) => {\r\n        const input = e.target.value;\r\n        this.setState({\r\n            pubInput: input\r\n        })\r\n    }\r\n\r\n    setPrivInput = (e) => {\r\n        const input = e.target.value;\r\n        this.setState({\r\n            privInput: input\r\n        })\r\n    }\r\n    authentication = async () => {\r\n\r\n        // get users from the api\r\n\r\n        try {\r\n            const response = await axios.get(`http://localhost:4000/users`);\r\n            const user = response.data;\r\n            console.log(user);\r\n            user.map(user => {\r\n                if (user.publicKey === this.state.pubInput &&\r\n                    user.privateKey === this.state.privInput) {\r\n                    const currentUser = user;\r\n                    this.props.actions.storeUserData(currentUser)\r\n                    this.props.history.push(\"/account\")\r\n                    this.setState({\r\n                        value: true,\r\n\r\n\r\n                    })\r\n\r\n                }\r\n\r\n\r\n            })\r\n\r\n            if (this.state.value = false) {\r\n                this.setState({\r\n                    to: \"/empty\"\r\n                })\r\n            }\r\n        } catch (err) {\r\n            console.log('Error: ' + err)\r\n        }\r\n\r\n        console.log('hello world')\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Alert variant={this.state.variant} show={this.state.showSuccess}>\r\n                    {this.state.text}\r\n                </Alert>\r\n                <Form>\r\n                    <Form.Group controlId=\"email\">\r\n                        <Form.Label>Publicaddress:<span>*</span></Form.Label>\r\n                        <Form.Control value={this.state.pubInput}\r\n                            onChange={this.setPubInput} type=\"text\" required />\r\n                        <Form.Text className=\"text-muted\">\r\n                            The E-Mail address on which we will reply, <strong>won't be shared with any third parties!</strong>\r\n                        </Form.Text>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"textarea\">\r\n                        <Form.Label>Privatekey<span>*</span></Form.Label>\r\n                        <Form.Control value={this.state.privInput} onChange={this.setPrivInput} required />\r\n                        <Form.Text className=\"text-muted\">\r\n                            Place your message here, <strong>won't be shared with any third parties!</strong>\r\n                        </Form.Text>\r\n                    </Form.Group>\r\n                    <Button onClick={this.authentication}>\r\n                        <Link to={this.state.to} value={false} >Log in</Link></Button>\r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => ({ applicationState: state });\r\nconst mapDispatchToProps = dispatch => ({ actions: bindActionCreators(actions, dispatch) });\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n","C:\\Users\\a-713\\OneDrive\\Desktop\\DC_Blockchain\\DC_Blockchain\\DC_FrontEnd\\src\\Components\\Navbar\\NavbarDC.js",[],"C:\\Users\\a-713\\OneDrive\\Desktop\\DC_Blockchain\\DC_Blockchain\\DC_FrontEnd\\src\\Components\\Login_Register\\CreateKeys.js",["66"],"import React, { Component } from 'react'\r\nimport { Button, Alert } from 'react-bootstrap';\r\nimport User from '../class';\r\nimport BlockchainAPI from '../BlockchainAPI';\r\nimport axios from 'axios';\r\nimport './CreateKeys.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass CreateKeys extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            publicKey: \"\",\r\n            privateKey: \"\",\r\n            showButton: false,\r\n            showAlert: false,\r\n            variant: \"warning\",\r\n            balance: 100,\r\n\r\n        }\r\n        this.user = User;\r\n        this.api = BlockchainAPI;\r\n    }\r\n\r\n\r\n    generateKeys = async () => {\r\n\r\n        const EC = require('elliptic').ec;\r\n        const ec = new EC('secp256k1');\r\n        const key = ec.genKeyPair();\r\n        setTimeout(async () => {\r\n            this.setState({\r\n                publicKey: key.getPublic('hex'),\r\n                privateKey: key.getPrivate('hex'),\r\n                showButton: true,\r\n            })\r\n\r\n            const user = {\r\n                publicKey: this.state.publicKey,\r\n                privateKey: this.state.privateKey,\r\n                balance: this.state.balance\r\n            }\r\n\r\n            try {\r\n                const response = await axios.post('http://localhost:4000/users/add', user);\r\n                console.log(response.data);\r\n            } catch (err) {\r\n                console.log('Error: ' + err)\r\n            }\r\n        }, 100)\r\n\r\n\r\n\r\n        // this.postUserData(user);\r\n\r\n        //Post method\r\n\r\n    }\r\n\r\n    postUserData = async (user) => {\r\n        try {\r\n            const response = await axios.post(`http:localhost:4000/users/add`, user);\r\n            console.log(response.data);\r\n        } catch (err) {\r\n            console.log('Error: ' + err)\r\n        }\r\n    }\r\n\r\n    generateUser = () => {\r\n        const user = {\r\n            publicKey: this.state.publicKey,\r\n            privateKey: this.state.privateKey,\r\n            balance: this.state.balance\r\n        }\r\n\r\n        return this.state.user;\r\n\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"keys\">\r\n                <Alert variant={this.state.variant} show={this.state.showAlert}>\r\n                    Your public and private Key are unique. Make sure to store it safely.<br />\r\n                If you are losing one of them, you will never be able to access your account again!!!.\r\n                </Alert>\r\n                <p>Your public key: {this.state.publicKey}</p>\r\n                <p>Your private key: {this.state.privateKey}</p>\r\n                <Button variant=\"outline-info\"\r\n                    onClick={this.generateKeys}\r\n                    disabled={this.state.showButton}>\r\n                    Generate Wallet\r\n                </Button>\r\n                <Button variant=\"outline-info\">\r\n                    <Link to=\"/login\" >Return to login</Link>\r\n                </Button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default CreateKeys; ","C:\\Users\\a-713\\OneDrive\\Desktop\\DC_Blockchain\\DC_Blockchain\\DC_FrontEnd\\src\\Components\\Dashboard\\Dashboard.js",["67"],"C:\\Users\\a-713\\OneDrive\\Desktop\\DC_Blockchain\\DC_Blockchain\\DC_FrontEnd\\src\\Components\\Account\\Account.js",["68","69","70","71","72","73","74","75","76"],"import React, { useState, useEffect } from 'react'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Alert from 'react-bootstrap/Alert'\r\nimport Transaction from './transaction_class';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport * as actions from '../../actions/app.action';\r\nimport axios from 'axios';\r\nimport { io } from \"socket.io-client\";\r\nimport SHA256 from 'crypto-js/sha256';\r\n\r\n\r\nfunction Account(props) {\r\n\r\n    const [balance, setBalance] = useState(props.applicationState.user.balance);\r\n\r\n    const [toAddressInput, setToAddressInput] = useState(\"\");\r\n    const [amount, setAmount] = useState(0);\r\n    const [fromAddressInput, setFromAddressInput] = useState(props.applicationState.user.publicKey);\r\n\r\n    const [variant, setVariant] = useState(\"success\");\r\n    const [showSuccess, setShowSuccess] = useState(false);\r\n    const [text, setText] = useState(\"\");\r\n\r\n    const [trig, setTrig] = useState(false)\r\n\r\n    const [miningData, setMiningData] = useState(\r\n        {\r\n            merkleHash: '',\r\n            blockID: 0,\r\n            maxBlockID: 0,\r\n            previousBlockHash: '',\r\n            previousBlockNonce: 0,\r\n            timestamp: 0,\r\n            difficultyHash: '09'\r\n        }\r\n    )\r\n\r\n    // Should contain data: userpublic key, hash, nonce\r\n    const [foundHash, setFoundHash] = useState(\r\n        {\r\n            userPublicKey: '',\r\n            hash: '',\r\n            nonce: 0\r\n        }\r\n    )\r\n\r\n    const signTransaction = async () => {\r\n        try {\r\n            const thisTransaction = {\r\n                toAddress: toAddressInput,\r\n                fromAdress: fromAddressInput,\r\n                amount: amount\r\n            }\r\n            console.log(thisTransaction);\r\n            const transres = await axios.post(`http://localhost:4000/blocks/update`, thisTransaction);\r\n            console.log(transres.data);\r\n        }\r\n        catch (err) {\r\n            console.log('Error: ' + err)\r\n        }\r\n    }\r\n\r\n    const SERVER = \"http://localhost:4000\";\r\n    const socket = io(SERVER);\r\n\r\n    useEffect(() => {\r\n        console.log('Interval')\r\n\r\n        socket.on('connect', () => {\r\n            console.log(`I'm connected with the back-end`);\r\n        });\r\n\r\n        socket.on(\"sendDataForMining\", (arg) => {\r\n            console.log(arg);\r\n            setMiningData(arg)\r\n        });\r\n\r\n        socket.off('connect', () => {\r\n            console.log(`I'm connected with the back-end`);\r\n        });\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (!!foundHash.hash && !!foundHash.userPublicKey) {\r\n            console.log('Send Hash: ')\r\n            console.log(foundHash)\r\n            socket.emit(\"sendHash\", foundHash);\r\n            console.log('The hash was sent')\r\n        }\r\n    }, [foundHash])\r\n\r\n    useEffect(() => {\r\n\r\n        console.log(trig)\r\n        if (trig) {\r\n            console.log('Initiate mining...')\r\n            //Perform calculaptions for the hash\r\n            console.log('Mining Data: ')\r\n            console.log(miningData)\r\n\r\n            let nonce = 0;\r\n            let control = 0;\r\n            if (!!miningData.timestamp) {\r\n                while (!control) {\r\n                    const tHash = SHA256(\r\n                        miningData.merkleHash\r\n                        + miningData.blockID\r\n                        + miningData.previousBlockHash\r\n                        + miningData.previousBlockNonce\r\n                        + miningData.timestamp\r\n                        + nonce).toString();\r\n                    if (miningData.difficultyHash > tHash) {\r\n                        console.log(tHash)\r\n                        console.log(miningData.difficultyHash > tHash)\r\n                        console.log(nonce)\r\n                        control = 1;\r\n\r\n                        setFoundHash({\r\n                            userPublicKey: fromAddressInput,\r\n                            hash: tHash,\r\n                            nonce: nonce\r\n                        })\r\n                    }\r\n                    nonce += 1\r\n                }\r\n            }\r\n            console.log('End mining...')\r\n        }\r\n    }, [miningData, trig])\r\n\r\n    // MISSING:\r\n    //   1 - Display the transaction history\r\n    //   2 - Display balance by doing a http request that updates every 10-60 sec\r\n\r\n    return (\r\n        <div>\r\n            <h1>Your balance: {balance}</h1>\r\n            <Alert variant={variant} show={showSuccess}>\r\n                {text}\r\n            </Alert>\r\n            <Form>\r\n                <Form.Group controlId=\"email\">\r\n                    <Form.Label>From address:<span>*</span></Form.Label>\r\n                    <Form.Control placeholder={fromAddressInput} value={fromAddressInput}\r\n                        type=\"text\" required />\r\n                    <Form.Text className=\"text-muted\">\r\n                        Thos is your wallet address <strong>You cannot change it, because you can only spend your own coins</strong>\r\n                    </Form.Text>\r\n                </Form.Group>\r\n                <Form.Group controlId=\"textarea\">\r\n                    <Form.Label>To address<span>*</span></Form.Label>\r\n                    <Form.Control value={toAddressInput} onChange={(e) => setToAddressInput(e.target.value)} required />\r\n                    <Form.Text className=\"text-muted\">\r\n                        The wallet address where you want to send the money to, <strong>enter only valid addresses!</strong>\r\n                    </Form.Text>\r\n                </Form.Group>\r\n                <Form.Group controlId=\"textarea\">\r\n                    <Form.Label>Amount<span>*</span></Form.Label>\r\n                    <Form.Control value={amount} onChange={(e) => setAmount(e.target.value)} required />\r\n                    <Form.Text className=\"text-muted\">\r\n                        Amount of money, you would like to send!\r\n                        </Form.Text>\r\n                </Form.Group>\r\n                <Button onClick={signTransaction}>Create transaction</Button>\r\n            </Form>\r\n            <br />\r\n            <br />\r\n            <h4>Minning</h4>\r\n            <br />\r\n            <h5>Options</h5>\r\n            <Form>\r\n                <Form.Group controlId=\"nonceOption\">\r\n                    <Form.Label>Starting value for the nonce:(needs to be implemnted all his option)<span>*</span></Form.Label>\r\n                    <Form.Control placeholder='Need to think' value={0}\r\n                        type=\"text\" required />\r\n                    <Form.Text className=\"text-muted\">\r\n                        Type a number to <strong>start mining</strong>\r\n                    </Form.Text>\r\n                </Form.Group>\r\n                <Button >Random number</Button>\r\n                <br />\r\n                <br />\r\n                <Button >Each iteration a random number</Button>\r\n                <br />\r\n                <br />\r\n                <Button >Save options</Button>\r\n            </Form>\r\n            <br />\r\n            <h5>Do you want to mine?</h5>\r\n            <Button onClick={() => setTrig(!trig)} >Mine</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({ applicationState: state });\r\nconst mapDispatchToProps = dispatch => ({ actions: bindActionCreators(actions, dispatch) });\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Account);","C:\\Users\\a-713\\OneDrive\\Desktop\\DC_Blockchain\\DC_Blockchain\\DC_FrontEnd\\src\\Components\\Account\\transaction_class.js",[],{"ruleId":"77","severity":1,"message":"78","line":12,"column":5,"nodeType":"79","messageId":"80","endLine":25,"endColumn":6},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":6,"column":27,"nodeType":"87","messageId":"88","endLine":6,"endColumn":33},{"ruleId":"85","severity":1,"message":"89","line":6,"column":35,"nodeType":"87","messageId":"88","endLine":6,"endColumn":40},{"ruleId":"85","severity":1,"message":"90","line":6,"column":42,"nodeType":"87","messageId":"88","endLine":6,"endColumn":48},{"ruleId":"91","severity":1,"message":"92","line":52,"column":27,"nodeType":"93","messageId":"94","endLine":52,"endColumn":29},{"ruleId":"95","severity":1,"message":"96","line":69,"column":17,"nodeType":"97","messageId":"98","endLine":69,"endColumn":41},{"ruleId":"85","severity":1,"message":"99","line":71,"column":15,"nodeType":"87","messageId":"88","endLine":71,"endColumn":19},{"ruleId":"85","severity":1,"message":"100","line":2,"column":10,"nodeType":"87","messageId":"88","endLine":2,"endColumn":16},{"ruleId":"85","severity":1,"message":"101","line":5,"column":8,"nodeType":"87","messageId":"88","endLine":5,"endColumn":19},{"ruleId":"85","severity":1,"message":"102","line":16,"column":21,"nodeType":"87","messageId":"88","endLine":16,"endColumn":31},{"ruleId":"85","severity":1,"message":"103","line":20,"column":30,"nodeType":"87","messageId":"88","endLine":20,"endColumn":49},{"ruleId":"85","severity":1,"message":"104","line":22,"column":21,"nodeType":"87","messageId":"88","endLine":22,"endColumn":31},{"ruleId":"85","severity":1,"message":"105","line":23,"column":25,"nodeType":"87","messageId":"88","endLine":23,"endColumn":39},{"ruleId":"85","severity":1,"message":"106","line":24,"column":18,"nodeType":"87","messageId":"88","endLine":24,"endColumn":25},{"ruleId":"107","severity":1,"message":"108","line":83,"column":8,"nodeType":"109","endLine":83,"endColumn":10,"suggestions":"110"},{"ruleId":"107","severity":1,"message":"108","line":92,"column":8,"nodeType":"109","endLine":92,"endColumn":19,"suggestions":"111"},{"ruleId":"107","severity":1,"message":"112","line":131,"column":8,"nodeType":"109","endLine":131,"endColumn":26,"suggestions":"113"},"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-native-reassign",["114"],"no-negated-in-lhs",["115"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Route' is defined but never used.","'Switch' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","'user' is assigned a value but never used.","'Button' is defined but never used.","'Transaction' is defined but never used.","'setBalance' is assigned a value but never used.","'setFromAddressInput' is assigned a value but never used.","'setVariant' is assigned a value but never used.","'setShowSuccess' is assigned a value but never used.","'setText' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'socket'. Either include it or remove the dependency array.","ArrayExpression",["116"],["117"],"React Hook useEffect has a missing dependency: 'fromAddressInput'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setFoundHash' needs the current value of 'fromAddressInput'.",["118"],"no-global-assign","no-unsafe-negation",{"desc":"119","fix":"120"},{"desc":"121","fix":"122"},{"desc":"123","fix":"124"},"Update the dependencies array to be: [socket]",{"range":"125","text":"126"},"Update the dependencies array to be: [foundHash, socket]",{"range":"127","text":"128"},"Update the dependencies array to be: [fromAddressInput, miningData, trig]",{"range":"129","text":"130"},[2544,2546],"[socket]",[2825,2836],"[foundHash, socket]",[4197,4215],"[fromAddressInput, miningData, trig]"]