[{"C:\\Users\\DavidWZ\\Documents\\GitHub\\DC_Blockchain\\DC_FrontEnd\\src\\index.js":"1","C:\\Users\\DavidWZ\\Documents\\GitHub\\DC_Blockchain\\DC_FrontEnd\\src\\reportWebVitals.js":"2","C:\\Users\\DavidWZ\\Documents\\GitHub\\DC_Blockchain\\DC_FrontEnd\\src\\App.js":"3","C:\\Users\\DavidWZ\\Documents\\GitHub\\DC_Blockchain\\DC_FrontEnd\\src\\reducers\\app.reducers.js":"4","C:\\Users\\DavidWZ\\Documents\\GitHub\\DC_Blockchain\\DC_FrontEnd\\src\\Components\\Login.js":"5","C:\\Users\\DavidWZ\\Documents\\GitHub\\DC_Blockchain\\DC_FrontEnd\\src\\Components\\NavbarDC.js":"6","C:\\Users\\DavidWZ\\Documents\\GitHub\\DC_Blockchain\\DC_FrontEnd\\src\\Components\\Dashboard.js":"7","C:\\Users\\DavidWZ\\Documents\\GitHub\\DC_Blockchain\\DC_FrontEnd\\src\\Components\\CreateKeys.js":"8","C:\\Users\\DavidWZ\\Documents\\GitHub\\DC_Blockchain\\DC_FrontEnd\\src\\Components\\Account.js":"9","C:\\Users\\DavidWZ\\Documents\\GitHub\\DC_Blockchain\\DC_FrontEnd\\src\\actions\\app.action.js":"10","C:\\Users\\DavidWZ\\Documents\\GitHub\\DC_Blockchain\\DC_FrontEnd\\src\\Components\\class.js":"11","C:\\Users\\DavidWZ\\Documents\\GitHub\\DC_Blockchain\\DC_FrontEnd\\src\\Components\\BlockchainAPI.js":"12","C:\\Users\\DavidWZ\\Documents\\GitHub\\DC_Blockchain\\DC_FrontEnd\\src\\Components\\transaction_class.js":"13","C:\\Users\\DavidWZ\\Documents\\GitHub\\DC_Blockchain\\DC_FrontEnd\\src\\reducers\\store.js":"14","C:\\Users\\DavidWZ\\Documents\\GitHub\\DC_Blockchain\\DC_FrontEnd\\src\\Components\\transactionsOfBlock.js":"15"},{"size":888,"mtime":1614348207079,"results":"16","hashOfConfig":"17"},{"size":375,"mtime":1613739181141,"results":"18","hashOfConfig":"17"},{"size":779,"mtime":1613739181118,"results":"19","hashOfConfig":"17"},{"size":791,"mtime":1614348438805,"results":"20","hashOfConfig":"17"},{"size":3395,"mtime":1614624503311,"results":"21","hashOfConfig":"17"},{"size":811,"mtime":1613739181129,"results":"22","hashOfConfig":"17"},{"size":2834,"mtime":1614526466173,"results":"23","hashOfConfig":"17"},{"size":3583,"mtime":1614680295645,"results":"24","hashOfConfig":"17"},{"size":8956,"mtime":1614349836780,"results":"25","hashOfConfig":"17"},{"size":477,"mtime":1614348374754,"results":"26","hashOfConfig":"17"},{"size":196,"mtime":1613739181130,"results":"27","hashOfConfig":"17"},{"size":808,"mtime":1613739181121,"results":"28","hashOfConfig":"17"},{"size":472,"mtime":1613739181135,"results":"29","hashOfConfig":"17"},{"size":449,"mtime":1614348209272,"results":"30","hashOfConfig":"17"},{"size":1505,"mtime":1614589157151,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1csp0if",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"34"},"C:\\Users\\DavidWZ\\Documents\\GitHub\\DC_Blockchain\\DC_FrontEnd\\src\\index.js",[],["67","68"],"C:\\Users\\DavidWZ\\Documents\\GitHub\\DC_Blockchain\\DC_FrontEnd\\src\\reportWebVitals.js",[],"C:\\Users\\DavidWZ\\Documents\\GitHub\\DC_Blockchain\\DC_FrontEnd\\src\\App.js",[],"C:\\Users\\DavidWZ\\Documents\\GitHub\\DC_Blockchain\\DC_FrontEnd\\src\\reducers\\app.reducers.js",["69","70"],"import { STORE_USER_DATA, STORE_LATESTBLOCK_DATA, RESET_REDUX } from '../actions/app.action';\r\n\r\nconst initialState = {\r\n    user: false,\r\n    loggedIn: false,\r\n    block: false\r\n};\r\n\r\nfunction appReducer(state = initialState, action) {\r\n    console.warn(\"App reducer invoked with state: \" + JSON.stringify(state) + \" with action \" + JSON.stringify(action));\r\n\r\n    switch (action.type) {\r\n        case STORE_USER_DATA:\r\n            return {\r\n                ...state,\r\n                user: action.user,\r\n                loggedIn: !!action.user\r\n            };\r\n\r\n        case STORE_LATESTBLOCK_DATA:\r\n            return {\r\n                ...state,\r\n                block: action.block\r\n            }\r\n    }\r\n\r\n    return {\r\n        ...initialState\r\n    };\r\n}\r\n\r\nexport default appReducer;","C:\\Users\\DavidWZ\\Documents\\GitHub\\DC_Blockchain\\DC_FrontEnd\\src\\Components\\Login.js",["71","72","73"],"import React, { Component } from 'react'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Alert from 'react-bootstrap/Alert'\r\nimport { Link } from 'react-router-dom';\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport axios from 'axios';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport * as actions from '../actions/app.action';\r\n\r\nclass Login extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n\r\n            showSuccess: false,\r\n            variant: \"success\",\r\n            text: '',\r\n\r\n            loginData: {\r\n                walletName: \"\",\r\n                privInput: \"\"\r\n            }\r\n\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    setPrivInput = (e) => {\r\n        const loginData = { ...this.state.loginData };\r\n        loginData.privInput = e.target.value;\r\n\r\n        this.setState({\r\n            loginData\r\n        })\r\n    }\r\n\r\n    setWalletName = (e) => {\r\n        const loginData = { ...this.state.loginData };\r\n        loginData.walletName = e.target.value;\r\n\r\n        this.setState({\r\n            loginData\r\n        })\r\n    }\r\n\r\n    authentication = async () => {\r\n\r\n\r\n\r\n        try {\r\n            const res = await axios.post('http://localhost:4000/login/login', this.state.loginData);\r\n            const response = res.data;\r\n            console.log(response.success)\r\n            if (response.success === true) {\r\n                this.props.actions.storeUserData(response.userData)\r\n                this.props.history.push(\"/account\")\r\n            }\r\n\r\n        } catch (err) {\r\n            console.log('Error: ' + err)\r\n        }\r\n\r\n        console.log('hello world')\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Alert variant={this.state.variant} show={this.state.showSuccess}>\r\n                    {this.state.text}\r\n                </Alert>\r\n                <Form>\r\n                    <Form.Group controlId=\"textarea\">\r\n                        <Form.Label>Wallet Name<span>*</span></Form.Label>\r\n                        <Form.Control value={this.state.walletName} onChange={this.setWalletName} required />\r\n                        <Form.Text className=\"text-muted\">\r\n                            Place your message here, <strong>won't be shared with any third parties!</strong>\r\n                        </Form.Text>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"textarea\">\r\n                        <Form.Label>Privatekey<span>*</span></Form.Label>\r\n                        <Form.Control value={this.state.privInput} onChange={this.setPrivInput} required />\r\n                        <Form.Text className=\"text-muted\">\r\n                            Place your message here, <strong>won't be shared with any third parties!</strong>\r\n                        </Form.Text>\r\n                    </Form.Group>\r\n                    <Button onClick={this.authentication}>\r\n                        <Link to={this.state.to} value={false} >Log in</Link></Button>\r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => ({ applicationState: state });\r\nconst mapDispatchToProps = dispatch => ({ actions: bindActionCreators(actions, dispatch) });\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n","C:\\Users\\DavidWZ\\Documents\\GitHub\\DC_Blockchain\\DC_FrontEnd\\src\\Components\\NavbarDC.js",[],"C:\\Users\\DavidWZ\\Documents\\GitHub\\DC_Blockchain\\DC_FrontEnd\\src\\Components\\Dashboard.js",[],"C:\\Users\\DavidWZ\\Documents\\GitHub\\DC_Blockchain\\DC_FrontEnd\\src\\Components\\CreateKeys.js",[],"C:\\Users\\DavidWZ\\Documents\\GitHub\\DC_Blockchain\\DC_FrontEnd\\src\\Components\\Account.js",["74","75","76","77","78","79","80","81","82"],"import React, { useState, useEffect } from 'react'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Alert from 'react-bootstrap/Alert'\r\nimport Transaction from './transaction_class';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport * as actions from '../actions/app.action';\r\nimport axios from 'axios';\r\nimport { io } from \"socket.io-client\";\r\nimport SHA256 from 'crypto-js/sha256';\r\n\r\n\r\nfunction Account(props) {\r\n\r\n    const [balance, setBalance] = useState(props.applicationState.user.balance);\r\n\r\n    const [toAddressInput, setToAddressInput] = useState(\"\");\r\n    const [amount, setAmount] = useState(0);\r\n    const [fromAddressInput, setFromAddressInput] = useState(props.applicationState.user.publicKey);\r\n\r\n    const [variant, setVariant] = useState(\"success\");\r\n    const [showSuccess, setShowSuccess] = useState(false);\r\n    const [text, setText] = useState(\"\");\r\n    const [transactions, setTransaction] = useState([]);\r\n    const [trig, setTrig] = useState(false)\r\n\r\n    const [miningData, setMiningData] = useState(\r\n        {\r\n            merkleHash: '',\r\n            blockID: 0,\r\n            maxBlockID: 0,\r\n            previousBlockHash: '',\r\n            previousBlockNonce: 0,\r\n            timestamp: 0,\r\n            difficultyHash: '09'\r\n        }\r\n    )\r\n\r\n    // Should contain data: userpublic key, hash, nonce\r\n    const [foundHash, setFoundHash] = useState(\r\n        {\r\n            userPublicKey: '',\r\n            hash: '',\r\n            nonce: 0\r\n        }\r\n    )\r\n\r\n    const signTransaction = async () => {\r\n        try {\r\n            const thisTransaction = {\r\n                toAddress: toAddressInput,\r\n                fromAdress: fromAddressInput,\r\n                amount: amount\r\n\r\n            }\r\n\r\n            console.log(thisTransaction);\r\n            const transres = await axios.post(`http://localhost:4000/blocks/update/${fromAddressInput}`, thisTransaction);\r\n            console.log(transres.data);\r\n            const trans = transres.data;\r\n            setBalance(trans.balance);\r\n            console.log(transactions)\r\n            // window.location.reload()\r\n        }\r\n        catch (err) {\r\n            console.log('Error: ' + err)\r\n        }\r\n    }\r\n\r\n    const SERVER = \"http://localhost:4000\";\r\n    const socket = io(SERVER);\r\n\r\n    useEffect(() => {\r\n        console.log('Interval')\r\n\r\n        socket.on('connect', () => {\r\n            console.log(`I'm connected with the back-end`);\r\n        });\r\n\r\n        // establish connection with the serversame header as Server\r\n        socket.on(\"sendDataForMining\", (arg) => {\r\n            console.log(arg);\r\n            setMiningData(arg)\r\n        });\r\n\r\n        socket.off('connect', () => {\r\n            console.log(`I'm connected with the back-end`);\r\n        });\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (!!foundHash.hash && !!foundHash.userPublicKey) {\r\n            console.log('Send Hash: ')\r\n            console.log(foundHash)\r\n            socket.emit(\"sendHash\", foundHash);\r\n            console.log('The hash was sent')\r\n        }\r\n    }, [foundHash])\r\n\r\n    useEffect(() => {\r\n\r\n        console.log(trig)\r\n        if (trig) {\r\n            console.log('Initiate mining...')\r\n            //Perform calculaptions for the hash\r\n            console.log('Mining Data: ')\r\n            console.log(miningData)\r\n\r\n            let nonce = 0;\r\n            let control = 0;\r\n            if (!!miningData.timestamp) {\r\n                while (!control) {\r\n                    const tHash = SHA256(\r\n                        miningData.merkleHash\r\n                        + miningData.blockID\r\n                        + miningData.previousBlockHash\r\n                        + miningData.previousBlockNonce\r\n                        + miningData.timestamp\r\n                        + nonce).toString();\r\n                    if (miningData.difficultyHash > tHash) {\r\n                        console.log(tHash)\r\n                        console.log(miningData.difficultyHash > tHash)\r\n                        console.log(nonce)\r\n                        control = 1;\r\n\r\n                        setFoundHash({\r\n                            userPublicKey: fromAddressInput,\r\n                            hash: tHash,\r\n                            nonce: nonce\r\n                        })\r\n                    }\r\n                    nonce += 1\r\n                }\r\n            }\r\n            console.log('End mining...')\r\n        }\r\n    }, [miningData, trig])\r\n\r\n    // MISSING:\r\n    //   1 - Display the transaction history\r\n    useEffect(() => {\r\n        getTransactions();\r\n    }, [setTransaction])\r\n\r\n    const getTransactions = async () => {\r\n        const response = await axios.get(`http://localhost:4000/users/getTransactions/${fromAddressInput}`)\r\n        // console.log(response.data);\r\n        setTransaction(response.data)\r\n    }\r\n    //   2 - Display balance by doing a http request that updates every 10-60 sec\r\n\r\n    return (\r\n        <div>\r\n            <h1>Your balance: {balance}</h1>\r\n            <Alert variant={variant} show={showSuccess}>\r\n                {text}\r\n            </Alert>\r\n            <Form>\r\n                <Form.Group controlId=\"email\">\r\n                    <Form.Label>From address:<span>*</span></Form.Label>\r\n                    <Form.Control placeholder={fromAddressInput} value={fromAddressInput}\r\n                        type=\"text\" required />\r\n                    <Form.Text className=\"text-muted\">\r\n                        Thos is your wallet address <strong>You cannot change it, because you can only spend your own coins</strong>\r\n                    </Form.Text>\r\n                </Form.Group>\r\n                <Form.Group controlId=\"textarea\">\r\n                    <Form.Label>To address<span>*</span></Form.Label>\r\n                    <Form.Control value={toAddressInput} onChange={(e) => setToAddressInput(e.target.value)} required />\r\n                    <Form.Text className=\"text-muted\">\r\n                        The wallet address where you want to send the money to, <strong>enter only valid addresses!</strong>\r\n                    </Form.Text>\r\n                </Form.Group>\r\n                <Form.Group controlId=\"textarea\">\r\n                    <Form.Label>Amount<span>*</span></Form.Label>\r\n                    <Form.Control value={amount} onChange={(e) => setAmount(e.target.value)} required />\r\n                    <Form.Text className=\"text-muted\">\r\n                        Amount of money, you would like to send!\r\n                        </Form.Text>\r\n                </Form.Group>\r\n                <Button onClick={signTransaction}>Create transaction</Button>\r\n            </Form>\r\n            <br />\r\n            <br />\r\n            <h4>Minning</h4>\r\n            <br />\r\n            <h5>Options</h5>\r\n            <Form>\r\n                <Form.Group controlId=\"nonceOption\">\r\n                    <Form.Label>Starting value for the nonce:(needs to be implemnted all his option)<span>*</span></Form.Label>\r\n                    <Form.Control placeholder='Need to think' value={0}\r\n                        type=\"text\" required />\r\n                    <Form.Text className=\"text-muted\">\r\n                        Type a number to <strong>start mining</strong>\r\n                    </Form.Text>\r\n                </Form.Group>\r\n                <Button >Random number</Button>\r\n                <br />\r\n                <br />\r\n                <Button >Each iteration a random number</Button>\r\n                <br />\r\n                <br />\r\n                <Button >Save options</Button>\r\n            </Form>\r\n            <br />\r\n            <h5>Do you want to mine?</h5>\r\n            <Button onClick={() => setTrig(!trig)} >Mine</Button>\r\n\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>From</th>\r\n                        <th>To</th>\r\n                        <th>Amount</th>\r\n                        <th>Hash</th>\r\n                        <th>Timestamp</th>\r\n\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {transactions.map(transaction => {\r\n                        return (\r\n                            <tr>\r\n                                <td>{transaction.fromAdress}</td>\r\n                                <td>{transaction.toAdress}</td>\r\n                                <td>{transaction.amount}</td>\r\n                                <td>{transaction.hash}</td>\r\n                                <td>{transaction.timestamp}</td>\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({ applicationState: state });\r\nconst mapDispatchToProps = dispatch => ({ actions: bindActionCreators(actions, dispatch) });\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Account);","C:\\Users\\DavidWZ\\Documents\\GitHub\\DC_Blockchain\\DC_FrontEnd\\src\\actions\\app.action.js",[],"C:\\Users\\DavidWZ\\Documents\\GitHub\\DC_Blockchain\\DC_FrontEnd\\src\\Components\\class.js",[],"C:\\Users\\DavidWZ\\Documents\\GitHub\\DC_Blockchain\\DC_FrontEnd\\src\\Components\\BlockchainAPI.js",[],"C:\\Users\\DavidWZ\\Documents\\GitHub\\DC_Blockchain\\DC_FrontEnd\\src\\Components\\transaction_class.js",[],"C:\\Users\\DavidWZ\\Documents\\GitHub\\DC_Blockchain\\DC_FrontEnd\\src\\reducers\\store.js",[],"C:\\Users\\DavidWZ\\Documents\\GitHub\\DC_Blockchain\\DC_FrontEnd\\src\\Components\\transactionsOfBlock.js",["83","84","85"],"import React, { useState, useEffect } from 'react'\r\n\r\nconst DisplayTransactionsOfBlock = (props) => {\r\n    const transactions = props.transactions;\r\n\r\n\r\n\r\n    if (transactions == []) {\r\n        return (\r\n            <h1> There are no transaction </h1>\r\n        )\r\n    } else {\r\n        return (\r\n            <div>\r\n\r\n                <h1>Transactions of the {props.blockID} block</h1>\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>From</th>\r\n                            <th>To</th>\r\n                            <th>Amount</th>\r\n                            <th>Hash</th>\r\n                            <th>Timestamp</th>\r\n\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {transactions.map(transaction => {\r\n                            return (\r\n                                <tr>\r\n                                    <td>{transaction.fromAdress}</td>\r\n                                    <td>{transaction.toAdress}</td>\r\n                                    <td>{transaction.amount}</td>\r\n                                    <td>{transaction.hash}</td>\r\n                                    <td>{transaction.timestamp}</td>\r\n                                </tr>\r\n                            );\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default DisplayTransactionsOfBlock",{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":1,"column":51,"nodeType":"92","messageId":"93","endLine":1,"endColumn":62},{"ruleId":"94","severity":1,"message":"95","line":12,"column":5,"nodeType":"96","messageId":"97","endLine":25,"endColumn":6},{"ruleId":"90","severity":1,"message":"98","line":6,"column":27,"nodeType":"92","messageId":"93","endLine":6,"endColumn":33},{"ruleId":"90","severity":1,"message":"99","line":6,"column":35,"nodeType":"92","messageId":"93","endLine":6,"endColumn":40},{"ruleId":"90","severity":1,"message":"100","line":6,"column":42,"nodeType":"92","messageId":"93","endLine":6,"endColumn":48},{"ruleId":"90","severity":1,"message":"101","line":5,"column":8,"nodeType":"92","messageId":"93","endLine":5,"endColumn":19},{"ruleId":"90","severity":1,"message":"102","line":20,"column":30,"nodeType":"92","messageId":"93","endLine":20,"endColumn":49},{"ruleId":"90","severity":1,"message":"103","line":22,"column":21,"nodeType":"92","messageId":"93","endLine":22,"endColumn":31},{"ruleId":"90","severity":1,"message":"104","line":23,"column":25,"nodeType":"92","messageId":"93","endLine":23,"endColumn":39},{"ruleId":"90","severity":1,"message":"105","line":24,"column":18,"nodeType":"92","messageId":"93","endLine":24,"endColumn":25},{"ruleId":"106","severity":1,"message":"107","line":90,"column":8,"nodeType":"108","endLine":90,"endColumn":10,"suggestions":"109"},{"ruleId":"106","severity":1,"message":"107","line":99,"column":8,"nodeType":"108","endLine":99,"endColumn":19,"suggestions":"110"},{"ruleId":"106","severity":1,"message":"111","line":138,"column":8,"nodeType":"108","endLine":138,"endColumn":26,"suggestions":"112"},{"ruleId":"106","severity":1,"message":"113","line":144,"column":8,"nodeType":"108","endLine":144,"endColumn":24,"suggestions":"114"},{"ruleId":"90","severity":1,"message":"115","line":1,"column":17,"nodeType":"92","messageId":"93","endLine":1,"endColumn":25},{"ruleId":"90","severity":1,"message":"116","line":1,"column":27,"nodeType":"92","messageId":"93","endLine":1,"endColumn":36},{"ruleId":"117","severity":1,"message":"118","line":8,"column":22,"nodeType":"119","messageId":"120","endLine":8,"endColumn":24},"no-native-reassign",["121"],"no-negated-in-lhs",["122"],"no-unused-vars","'RESET_REDUX' is defined but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'Router' is defined but never used.","'Route' is defined but never used.","'Switch' is defined but never used.","'Transaction' is defined but never used.","'setFromAddressInput' is assigned a value but never used.","'setVariant' is assigned a value but never used.","'setShowSuccess' is assigned a value but never used.","'setText' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'socket'. Either include it or remove the dependency array.","ArrayExpression",["123"],["124"],"React Hook useEffect has a missing dependency: 'fromAddressInput'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setFoundHash' needs the current value of 'fromAddressInput'.",["125"],"React Hook useEffect has a missing dependency: 'getTransactions'. Either include it or remove the dependency array.",["126"],"'useState' is defined but never used.","'useEffect' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"127","fix":"128"},{"desc":"129","fix":"130"},{"desc":"131","fix":"132"},{"desc":"133","fix":"134"},"Update the dependencies array to be: [socket]",{"range":"135","text":"136"},"Update the dependencies array to be: [foundHash, socket]",{"range":"137","text":"138"},"Update the dependencies array to be: [fromAddressInput, miningData, trig]",{"range":"139","text":"140"},"Update the dependencies array to be: [getTransactions, setTransaction]",{"range":"141","text":"142"},[2853,2855],"[socket]",[3134,3145],"[foundHash, socket]",[4506,4524],"[fromAddressInput, miningData, trig]",[4650,4666],"[getTransactions, setTransaction]"]